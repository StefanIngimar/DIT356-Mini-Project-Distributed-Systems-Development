// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contact.sql

package db

import (
	"context"
	"database/sql"
)

const addContact = `-- name: AddContact :one
insert into contact (id, email, phone_number)
values (?, ?, ?)
returning id, created_at, updated_at, email, phone_number
`

type AddContactParams struct {
	ID          interface{}
	Email       sql.NullString
	PhoneNumber sql.NullString
}

func (q *Queries) AddContact(ctx context.Context, arg AddContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, addContact, arg.ID, arg.Email, arg.PhoneNumber)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PhoneNumber,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
delete from contact where id = ?
`

func (q *Queries) DeleteContact(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteContact, id)
	return err
}

const getContactById = `-- name: GetContactById :one
select id, created_at, updated_at, email, phone_number from contact where id = ?
`

func (q *Queries) GetContactById(ctx context.Context, id interface{}) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactById, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.PhoneNumber,
	)
	return i, err
}

const getContacts = `-- name: GetContacts :many
select id, created_at, updated_at, email, phone_number from contact
order by created_at
limit ? offset ?
`

type GetContactsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetContacts(ctx context.Context, arg GetContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, getContacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :exec
update contact
set email = ?, phone_number = ?
where id = ?
`

type UpdateContactParams struct {
	Email       sql.NullString
	PhoneNumber sql.NullString
	ID          interface{}
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) error {
	_, err := q.db.ExecContext(ctx, updateContact, arg.Email, arg.PhoneNumber, arg.ID)
	return err
}
