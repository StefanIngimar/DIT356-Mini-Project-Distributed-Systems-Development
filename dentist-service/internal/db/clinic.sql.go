// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clinic.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addClinic = `-- name: AddClinic :one
insert into clinic (id, name, description, address_id, contact_id)
values (?, ?, ?, ?, ?)
returning id, created_at, updated_at, name, description, logo_url, address_id, contact_id
`

type AddClinicParams struct {
	ID          interface{}
	Name        string
	Description sql.NullString
	AddressID   interface{}
	ContactID   interface{}
}

func (q *Queries) AddClinic(ctx context.Context, arg AddClinicParams) (Clinic, error) {
	row := q.db.QueryRowContext(ctx, addClinic,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.AddressID,
		arg.ContactID,
	)
	var i Clinic
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.LogoUrl,
		&i.AddressID,
		&i.ContactID,
	)
	return i, err
}

const deleteClinic = `-- name: DeleteClinic :exec
delete from clinic where id = ?
`

func (q *Queries) DeleteClinic(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteClinic, id)
	return err
}

const getClinicById = `-- name: GetClinicById :one
select
    clinic.ID as id,
    clinic.created_at as created_at,
    clinic.updated_at as updated_at,
    clinic.name as name,
    clinic.description as description,
    clinic.logo_url as logo_url,

    contact.id as contact_id,
    contact.created_at as contact_created_at,
    contact.updated_at as contact_updated_at,
    contact.email as contact_email,
    contact.phone_number as contact_phone_number,

    address.id as address_id,
    address.created_at as address_created_at,
    address.updated_at as address_updated_at,
    address.street as street,
    address.city as city,
    address.postal_Code as postal_code,
    address.country as country,
    address.latitude as latitude,
    address.longitude as longitude
from clinic
left join address on clinic.address_id = address.id
left join contact on clinic.contact_id = contact.id
where clinic.id = ?
`

type GetClinicByIdRow struct {
	ID                 interface{}
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Name               string
	Description        sql.NullString
	LogoUrl            string
	ContactID          interface{}
	ContactCreatedAt   sql.NullTime
	ContactUpdatedAt   sql.NullTime
	ContactEmail       sql.NullString
	ContactPhoneNumber sql.NullString
	AddressID          interface{}
	AddressCreatedAt   sql.NullTime
	AddressUpdatedAt   sql.NullTime
	Street             sql.NullString
	City               sql.NullString
	PostalCode         sql.NullString
	Country            sql.NullString
	Latitude           sql.NullFloat64
	Longitude          sql.NullFloat64
}

func (q *Queries) GetClinicById(ctx context.Context, id interface{}) (GetClinicByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getClinicById, id)
	var i GetClinicByIdRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.LogoUrl,
		&i.ContactID,
		&i.ContactCreatedAt,
		&i.ContactUpdatedAt,
		&i.ContactEmail,
		&i.ContactPhoneNumber,
		&i.AddressID,
		&i.AddressCreatedAt,
		&i.AddressUpdatedAt,
		&i.Street,
		&i.City,
		&i.PostalCode,
		&i.Country,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const getClinics = `-- name: GetClinics :many
select
    clinic.ID as id,
    clinic.created_at as created_at,
    clinic.updated_at as updated_at,
    clinic.name as name,
    clinic.description as description,
    clinic.logo_url as logo_url,

    contact.id as contact_id,
    contact.created_at as contact_created_at,
    contact.updated_at as contact_updated_at,
    contact.email as contact_email,
    contact.phone_number as contact_phone_number,

    address.id as address_id,
    address.created_at as address_created_at,
    address.updated_at as address_updated_at,
    address.street as street,
    address.city as city,
    address.postal_Code as postal_code,
    address.country as country,
    address.latitude as latitude,
    address.longitude as longitude
from clinic
left join address on clinic.address_id = address.id
left join contact on clinic.contact_id = contact.id
order by clinic.created_at
limit ? offset ?
`

type GetClinicsParams struct {
	Limit  int64
	Offset int64
}

type GetClinicsRow struct {
	ID                 interface{}
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Name               string
	Description        sql.NullString
	LogoUrl            string
	ContactID          interface{}
	ContactCreatedAt   sql.NullTime
	ContactUpdatedAt   sql.NullTime
	ContactEmail       sql.NullString
	ContactPhoneNumber sql.NullString
	AddressID          interface{}
	AddressCreatedAt   sql.NullTime
	AddressUpdatedAt   sql.NullTime
	Street             sql.NullString
	City               sql.NullString
	PostalCode         sql.NullString
	Country            sql.NullString
	Latitude           sql.NullFloat64
	Longitude          sql.NullFloat64
}

func (q *Queries) GetClinics(ctx context.Context, arg GetClinicsParams) ([]GetClinicsRow, error) {
	rows, err := q.db.QueryContext(ctx, getClinics, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClinicsRow
	for rows.Next() {
		var i GetClinicsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.LogoUrl,
			&i.ContactID,
			&i.ContactCreatedAt,
			&i.ContactUpdatedAt,
			&i.ContactEmail,
			&i.ContactPhoneNumber,
			&i.AddressID,
			&i.AddressCreatedAt,
			&i.AddressUpdatedAt,
			&i.Street,
			&i.City,
			&i.PostalCode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClinic = `-- name: UpdateClinic :exec
update clinic
set name = ?, description = ?
where id = ?
`

type UpdateClinicParams struct {
	Name        string
	Description sql.NullString
	ID          interface{}
}

func (q *Queries) UpdateClinic(ctx context.Context, arg UpdateClinicParams) error {
	_, err := q.db.ExecContext(ctx, updateClinic, arg.Name, arg.Description, arg.ID)
	return err
}
