// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clinic_dentist.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addClinicDentist = `-- name: AddClinicDentist :one
insert into clinic_dentist (clinic_id, dentist_id)
values (?, ?)
returning created_at, updated_at, clinic_id, dentist_id
`

type AddClinicDentistParams struct {
	ClinicID  interface{}
	DentistID interface{}
}

func (q *Queries) AddClinicDentist(ctx context.Context, arg AddClinicDentistParams) (ClinicDentist, error) {
	row := q.db.QueryRowContext(ctx, addClinicDentist, arg.ClinicID, arg.DentistID)
	var i ClinicDentist
	err := row.Scan(
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClinicID,
		&i.DentistID,
	)
	return i, err
}

const getClinicsAssociatedWithDentist = `-- name: GetClinicsAssociatedWithDentist :many
select
    clinic.ID as id,
    clinic.created_at as created_at,
    clinic.updated_at as updated_at,
    clinic.name as name,
    clinic.description as description,
    clinic.logo_url as logo_url,

    contact.id as contact_id,
    contact.created_at as contact_created_at,
    contact.updated_at as contact_updated_at,
    contact.email as contact_email,
    contact.phone_number as contact_phone_number,

    address.id as address_id,
    address.created_at as address_created_at,
    address.updated_at as address_updated_at,
    address.street as street,
    address.city as city,
    address.postal_Code as postal_code,
    address.country as country,
    address.latitude as latitude,
    address.longitude as longitude
from clinic_dentist
join clinic on clinic.id = clinic_dentist.clinic_id
join address on address.id = clinic.address_id
join contact on contact.id = clinic.contact_id
where clinic_dentist.dentist_id = ?
`

type GetClinicsAssociatedWithDentistRow struct {
	ID                 interface{}
	CreatedAt          time.Time
	UpdatedAt          time.Time
	Name               string
	Description        sql.NullString
	LogoUrl            string
	ContactID          interface{}
	ContactCreatedAt   time.Time
	ContactUpdatedAt   time.Time
	ContactEmail       sql.NullString
	ContactPhoneNumber sql.NullString
	AddressID          interface{}
	AddressCreatedAt   time.Time
	AddressUpdatedAt   time.Time
	Street             string
	City               string
	PostalCode         string
	Country            string
	Latitude           sql.NullFloat64
	Longitude          sql.NullFloat64
}

func (q *Queries) GetClinicsAssociatedWithDentist(ctx context.Context, dentistID interface{}) ([]GetClinicsAssociatedWithDentistRow, error) {
	rows, err := q.db.QueryContext(ctx, getClinicsAssociatedWithDentist, dentistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClinicsAssociatedWithDentistRow
	for rows.Next() {
		var i GetClinicsAssociatedWithDentistRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.LogoUrl,
			&i.ContactID,
			&i.ContactCreatedAt,
			&i.ContactUpdatedAt,
			&i.ContactEmail,
			&i.ContactPhoneNumber,
			&i.AddressID,
			&i.AddressCreatedAt,
			&i.AddressUpdatedAt,
			&i.Street,
			&i.City,
			&i.PostalCode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDentistsForClinic = `-- name: GetDentistsForClinic :many
select 
    dentist.ID as id,
    dentist.user_id as user_id,
    dentist.first_name as first_name,
    dentist.last_name as last_name,
    dentist.image_url as image_url,
    dentist.specialization as specialization,
    dentist.years_of_experiance as years_of_experiance,
    contact.id as contact_id,
    contact.email as contact_email,
    contact.phone_number as contact_phone_number
from clinic_dentist
join dentist on dentist.id = clinic_dentist.dentist_id
join contact on dentist.contact_id = contact.id
where clinic_dentist.clinic_id = ?
`

type GetDentistsForClinicRow struct {
	ID                 interface{}
	UserID             interface{}
	FirstName          string
	LastName           string
	ImageUrl           string
	Specialization     sql.NullString
	YearsOfExperiance  sql.NullInt64
	ContactID          interface{}
	ContactEmail       sql.NullString
	ContactPhoneNumber sql.NullString
}

func (q *Queries) GetDentistsForClinic(ctx context.Context, clinicID interface{}) ([]GetDentistsForClinicRow, error) {
	rows, err := q.db.QueryContext(ctx, getDentistsForClinic, clinicID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDentistsForClinicRow
	for rows.Next() {
		var i GetDentistsForClinicRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.ImageUrl,
			&i.Specialization,
			&i.YearsOfExperiance,
			&i.ContactID,
			&i.ContactEmail,
			&i.ContactPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
