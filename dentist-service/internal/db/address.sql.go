// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: address.sql

package db

import (
	"context"
	"database/sql"
)

const addAddress = `-- name: AddAddress :one
insert into address (id, street, city, postal_code, country, latitude, longitude)
values (?, ?, ?, ?, ?, ?, ?)
returning id, created_at, updated_at, street, city, postal_code, country, latitude, longitude
`

type AddAddressParams struct {
	ID         interface{}
	Street     string
	City       string
	PostalCode string
	Country    string
	Latitude   sql.NullFloat64
	Longitude  sql.NullFloat64
}

func (q *Queries) AddAddress(ctx context.Context, arg AddAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, addAddress,
		arg.ID,
		arg.Street,
		arg.City,
		arg.PostalCode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Street,
		&i.City,
		&i.PostalCode,
		&i.Country,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
delete from address where id = ?
`

func (q *Queries) DeleteAddress(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, id)
	return err
}

const getAddressById = `-- name: GetAddressById :one
select id, created_at, updated_at, street, city, postal_code, country, latitude, longitude from address where id = ?
`

func (q *Queries) GetAddressById(ctx context.Context, id interface{}) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressById, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Street,
		&i.City,
		&i.PostalCode,
		&i.Country,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const getAddresses = `-- name: GetAddresses :many
select id, created_at, updated_at, street, city, postal_code, country, latitude, longitude from address
order by created_at
limit ? offset ?
`

type GetAddressesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) GetAddresses(ctx context.Context, arg GetAddressesParams) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddresses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Street,
			&i.City,
			&i.PostalCode,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :exec
update address
set street = ?, city = ?, postal_code = ?, country = ?, latitude = ?, longitude = ?
where id = ?
`

type UpdateAddressParams struct {
	Street     string
	City       string
	PostalCode string
	Country    string
	Latitude   sql.NullFloat64
	Longitude  sql.NullFloat64
	ID         interface{}
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAddress,
		arg.Street,
		arg.City,
		arg.PostalCode,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
		arg.ID,
	)
	return err
}
